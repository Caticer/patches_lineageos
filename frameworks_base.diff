diff --git a/services/core/java/com/android/server/DeviceIdleController.java b/services/core/java/com/android/server/DeviceIdleController.java
index ea7b90e65ae..312577d9632 100644
--- a/services/core/java/com/android/server/DeviceIdleController.java
+++ b/services/core/java/com/android/server/DeviceIdleController.java
@@ -84,8 +84,6 @@ import com.android.internal.util.FastXmlSerializer;
 import com.android.internal.util.XmlUtils;
 import com.android.server.am.BatteryStatsService;

-import org.cyanogenmod.internal.util.PackageManagerUtils;
-
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlSerializer;
@@ -972,35 +970,35 @@ public class DeviceIdleController extends SystemService

     @Override
     public void onAnyMotionResult(int result) {
-        if (DEBUG) Slog.d(TAG, "onAnyMotionResult(" + result + ")");
-        if (result != AnyMotionDetector.RESULT_UNKNOWN) {
-            synchronized (this) {
-                cancelSensingTimeoutAlarmLocked();
-            }
-        }
-        if ((result == AnyMotionDetector.RESULT_MOVED) ||
-            (result == AnyMotionDetector.RESULT_UNKNOWN)) {
-            synchronized (this) {
-                handleMotionDetectedLocked(mConstants.INACTIVE_TIMEOUT, "non_stationary");
-            }
-        } else if (result == AnyMotionDetector.RESULT_STATIONARY) {
-            if (mState == STATE_SENSING) {
+        // if (DEBUG) Slog.d(TAG, "onAnyMotionResult(" + result + ")");
+        // if (result != AnyMotionDetector.RESULT_UNKNOWN) {
+            // synchronized (this) {
+                // cancelSensingTimeoutAlarmLocked();
+            // }
+        // }
+        // if ((result == AnyMotionDetector.RESULT_MOVED) ||
+            // (result == AnyMotionDetector.RESULT_UNKNOWN)) {
+            // synchronized (this) {
+                // handleMotionDetectedLocked(mConstants.INACTIVE_TIMEOUT, "non_stationary");
+            // }
+        // } else if (result == AnyMotionDetector.RESULT_STATIONARY) {
+            // if (mState == STATE_SENSING) {
                 // If we are currently sensing, it is time to move to locating.
                 synchronized (this) {
                     mNotMoving = true;
                     stepIdleStateLocked("s:stationary");
                 }
-            } else if (mState == STATE_LOCATING) {
+            // } else if (mState == STATE_LOCATING) {
                 // If we are currently locating, note that we are not moving and step
                 // if we have located the position.
-                synchronized (this) {
-                    mNotMoving = true;
-                    if (mLocated) {
-                        stepIdleStateLocked("s:stationary");
-                    }
-                }
-            }
-        }
+                // synchronized (this) {
+                    // mNotMoving = true;
+                    // if (mLocated) {
+                        // stepIdleStateLocked("s:stationary");
+                    // }
+                // }
+            // }
+        // }
     }

     private static final int MSG_WRITE_CONFIG = 1;
@@ -1319,8 +1317,7 @@ public class DeviceIdleController extends SystemService

         synchronized (this) {
             mLightEnabled = mDeepEnabled = getContext().getResources().getBoolean(
-                    com.android.internal.R.bool.config_enableAutoPowerModes) &&
-                    PackageManagerUtils.isAppInstalled(getContext(), "com.google.android.gms");
+                    com.android.internal.R.bool.config_enableAutoPowerModes);
             SystemConfig sysConfig = SystemConfig.getInstance();
             ArraySet<String> allowPowerExceptIdle = sysConfig.getAllowInPowerSaveExceptIdle();
             for (int i=0; i<allowPowerExceptIdle.size(); i++) {
@@ -2274,13 +2271,13 @@ public class DeviceIdleController extends SystemService

     void scheduleAlarmLocked(long delay, boolean idleUntil) {
         if (DEBUG) Slog.d(TAG, "scheduleAlarmLocked(" + delay + ", " + idleUntil + ")");
-        if (mMotionSensor == null) {
+        // if (mMotionSensor == null) {
             // If there is no motion sensor on this device, then we won't schedule
             // alarms, because we can't determine if the device is not moving.  This effectively
             // turns off normal execution of device idling, although it is still possible to
             // manually poke it by pretending like the alarm is going off.
-            return;
-        }
+            // return;
+        // }
         mNextAlarmTime = SystemClock.elapsedRealtime() + delay;
         if (idleUntil) {
             mAlarmManager.setIdleUntil(AlarmManager.ELAPSED_REALTIME_WAKEUP,
diff --git a/services/usage/Android.mk b/services/usage/Android.mk
index cc3ff9d1bd4..f1cbe98586b 100644
--- a/services/usage/Android.mk
+++ b/services/usage/Android.mk
@@ -9,6 +9,4 @@ LOCAL_SRC_FILES += \

 LOCAL_JAVA_LIBRARIES := services.core

-LOCAL_JAVA_LIBRARIES += org.cyanogenmod.platform.internal
-
 include $(BUILD_STATIC_JAVA_LIBRARY)
diff --git a/services/usage/java/com/android/server/usage/UsageStatsService.java b/services/usage/java/com/android/server/usage/UsageStatsService.java
index 0e8f2289f91..04104b5c70d 100644
--- a/services/usage/java/com/android/server/usage/UsageStatsService.java
+++ b/services/usage/java/com/android/server/usage/UsageStatsService.java
@@ -78,8 +78,6 @@ import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.IndentingPrintWriter;
 import com.android.server.SystemService;

-import org.cyanogenmod.internal.util.PackageManagerUtils;
-
 import java.io.File;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -191,8 +189,7 @@ public class UsageStatsService extends SystemService implements
                 null, mHandler);

         mAppIdleEnabled = getContext().getResources().getBoolean(
-                com.android.internal.R.bool.config_enableAutoPowerModes) &&
-                PackageManagerUtils.isAppInstalled(getContext(), "com.google.android.gms");
+                com.android.internal.R.bool.config_enableAutoPowerModes);
         if (mAppIdleEnabled) {
             IntentFilter deviceStates = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
             deviceStates.addAction(BatteryManager.ACTION_DISCHARGING);
